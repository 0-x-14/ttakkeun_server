#name: ttakkeun dev CI/CD
#
#on:
#  pull_request:
#    types: [closed] # merge가 됐을 때 작동하도록 함
#  workflow_dispatch: # (2).수동 실행도 가능하도록
#
#jobs:
#  build:
#    runs-on: ubuntu-latest # (3).OS환경
#    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop'
#    # develop 브랜치에 merge가 됐을 때 작동하도록 설정
#
#    steps:
#      - name: Checkout # 위에서 기재한 develop 브랜치의 코드를 가져옴
#        uses: actions/checkout@v2 # (4).코드 check out
#
#      - name: Set up JDK 17 # 깃허브 자체적으로 자바 jdk를 설치함
#        uses: actions/setup-java@v3
#        with:
#          java-version: 17 # (5).자바 설치
#          distribution: 'adopt'
#
#      - name: Grant execute permission for gradlew # gradle이 들어갈 대상에 권한을 부여함
#        run: chmod +x ./gradlew
#        shell: bash # (6).권한 부여
#
#      - name: Build with Gradle
#        run: ./gradlew clean build -x test
#        shell: bash # (7).build시작
#        # (5), (6), (7) - Github Actions를 이용해서 Jar 파일을 만드는 과정
#
#      - name: Get current time
#        uses: 1466587594/get-current-time@v2
#        id: current-time
#        with:
#          format: YYYY-MM-DDTHH-mm-ss
#          utcOffset: "+09:00" # (8).build시점의 시간확보
#
#      - name: Show Current Time
#        run: echo "CurrentTime=$"
#        shell: bash # (9).확보한 시간 보여주기
#        # (8), (9) - 타임스탬프를 기록하기 위한 과정
#
#      - name: Generate deployment package
#        run: |
#          mkdir -p deploy
#          cp build/libs/*.jar deploy/application.jar
#          cp Procfile deploy/Procfile
#          cp -r .ebextensions-dev deploy/.ebextensions
#          cp -r .platform deploy/.platform
#          cd deploy && zip -r deploy.zip .
#        # Github Action을 통해 깃허브가 자체적으로 리눅스 가상 환경을 만들어서
#        # 배포에 필요한 빌드 과정을 진행하는 과정
#
#      - name: List deploy directory contents
#        run: |
#          echo "Contents of deploy directory:"
#          ls -R deploy
#        shell: bash
#
#      - name: Check nginx.conf existence
#        run: |
#          if [ -f deploy/.platform/nginx.conf ]; then
#            echo "nginx.conf found"
#          else
#            echo "nginx.conf not found"
#            exit 1
#          fi
#        shell: bash
#        # nginx 상태 점검용 코드 추가
#
#      - name: Unzip deploy package
#        run: |
#          unzip deploy/deploy.zip -d deploy/unzipped
#          echo "Contents of unzipped deploy directory:"
#          ls -R deploy/unzipped
#        shell: bash
#      # deploy.zip 파일 내 내용 확인
#
#      - name: Beanstalk Deploy
#        uses: einaregilsson/beanstalk-deploy@v21
#        with:
#          aws_access_key: ${{ secrets.AWS_ACTION_ACCESS_KEY_ID }} # 깃허브에 secrets로 설정함
#          aws_secret_key: ${{ secrets.AWS_ACTION_SECRET_ACCESS_KEY }} # 깃허브에 secrets로 설정함
#          application_name: umc-ttakkeun-dev
#          environment_name: Umc-ttakkeun-dev-env # Elastic Beanstalk명
#          version_label: github-action-${{ steps.current-time.outputs.formattedTime }} # 타임스탬프
#          region: ap-northeast-2
#          deployment_package: deploy/deploy.zip
#          wait_for_deployment: false
#        # Elastic beanstalk에 배포 요청